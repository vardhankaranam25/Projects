/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.Customer;

import Enterprise.main.EcoSystem;
import Enterprise.DiningMenu.MenuSelection;
import Enterprise.Customer.Customer;
import Enterprise.ServiceRequest.DiningMenuServiceRequest;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.MutableComboBoxModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vardhankaranam25
 */
public class FoodBookingPanel extends javax.swing.JPanel {

    /**
     * Creates new form FoodBookingPanel
     */
    EcoSystem system;
    Customer user;
    ArrayList<MenuSelection> foodOrderList;

    public FoodBookingPanel(EcoSystem system, Customer user) {
        initComponents();

        foodOrderList = new ArrayList<MenuSelection>();
        this.system = system;
        this.user = user;

        MutableComboBoxModel<String> model = new DefaultComboBoxModel<String>();

        for (MenuSelection itemList : system.getMenuSelectionList().getmenuItemsList()) {
            model.addElement(itemList.getMenuName());
        }

        chooseFoodDropdown.setModel(model);

        itemNameTxt.setEditable(false);
        itemCategoryTxt.setEditable(false);
        itemPriceTxt.setEditable(false);

        populateRequestTable();
        formatRows();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        chooseFoodDropdown = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        itemNameTxt = new javax.swing.JTextField();
        viewDetailsBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        itemCategoryTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        itemPriceTxt = new javax.swing.JTextField();
        addItemBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemListTable = new javax.swing.JTable();
        bookOrderBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderStatusTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        removeItemBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(242, 233, 174));
        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(157, 193, 131));
        jLabel1.setText("Book From Dining Menu");
        add(jLabel1);
        jLabel1.setBounds(240, 40, 470, 50);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(157, 193, 131));
        jLabel2.setText("Choose a Food or Beverage:");
        add(jLabel2);
        jLabel2.setBounds(156, 130, 240, 21);

        add(chooseFoodDropdown);
        chooseFoodDropdown.setBounds(390, 120, 240, 30);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(157, 193, 131));
        jLabel3.setText("Item Name:");
        add(jLabel3);
        jLabel3.setBounds(10, 200, 100, 21);
        add(itemNameTxt);
        itemNameTxt.setBounds(110, 200, 150, 20);

        viewDetailsBtn.setForeground(new java.awt.Color(157, 193, 131));
        viewDetailsBtn.setText("View Details");
        viewDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsBtnActionPerformed(evt);
            }
        });
        add(viewDetailsBtn);
        viewDetailsBtn.setBounds(680, 120, 102, 23);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(157, 193, 131));
        jLabel4.setText("Item Category:");
        add(jLabel4);
        jLabel4.setBounds(280, 200, 120, 21);
        add(itemCategoryTxt);
        itemCategoryTxt.setBounds(420, 200, 160, 23);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(157, 193, 131));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Item Price:");
        add(jLabel5);
        jLabel5.setBounds(592, 200, 90, 21);
        add(itemPriceTxt);
        itemPriceTxt.setBounds(700, 200, 160, 23);

        addItemBtn.setForeground(new java.awt.Color(157, 193, 131));
        addItemBtn.setText("Add Item");
        addItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemBtnActionPerformed(evt);
            }
        });
        add(addItemBtn);
        addItemBtn.setBounds(880, 200, 83, 23);

        itemListTable.setForeground(new java.awt.Color(157, 193, 131));
        itemListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Item Category", "Item Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(itemListTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(20, 280, 966, 195);

        bookOrderBtn.setForeground(new java.awt.Color(157, 193, 131));
        bookOrderBtn.setText("Book Order");
        bookOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookOrderBtnActionPerformed(evt);
            }
        });
        add(bookOrderBtn);
        bookOrderBtn.setBounds(870, 490, 97, 39);

        orderStatusTable.setForeground(new java.awt.Color(157, 193, 131));
        orderStatusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "List of Items", "Total Price", "Order Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderStatusTable);

        add(jScrollPane2);
        jScrollPane2.setBounds(20, 580, 966, 245);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(157, 193, 131));
        jLabel6.setText("Food and Beverage Order Status");
        add(jLabel6);
        jLabel6.setBounds(292, 540, 270, 21);

        removeItemBtn.setForeground(new java.awt.Color(157, 193, 131));
        removeItemBtn.setText("Remove Item");
        removeItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemBtnActionPerformed(evt);
            }
        });
        add(removeItemBtn);
        removeItemBtn.setBounds(720, 490, 107, 39);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gradientful.jpeg"))); // NOI18N
        add(jLabel7);
        jLabel7.setBounds(0, 50, 1500, 960);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gradientful.jpeg"))); // NOI18N
        add(jLabel8);
        jLabel8.setBounds(0, -80, 1500, 960);
    }// </editor-fold>//GEN-END:initComponents

    private void viewDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsBtnActionPerformed
        // TODO add your handling code here:

        try {
            if (chooseFoodDropdown.getSelectedItem() != null) {

                String itemName = String.valueOf(chooseFoodDropdown.getSelectedItem());
                MenuSelection itemDetails = system.getMenuSelectionList().getItemByName(itemName);

                itemNameTxt.setText(itemDetails.getMenuName());
                itemCategoryTxt.setText(itemDetails.getMenucategory());
                itemPriceTxt.setText(String.valueOf(itemDetails.getMenuprice()));

            } else {
                JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for viewing");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for viewing");
        }
    }//GEN-LAST:event_viewDetailsBtnActionPerformed

    private void addItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemBtnActionPerformed
        // TODO add your handling code here:

        try {

            DefaultTableModel itemListModel = (DefaultTableModel) itemListTable.getModel();

            if (chooseFoodDropdown.getSelectedItem() != null) {

                String itemName = String.valueOf(chooseFoodDropdown.getSelectedItem());
                MenuSelection itemDetails = system.getMenuSelectionList().getItemByName(itemName);

                Object[] newRow = new Object[3];
                newRow[0] = itemDetails.getMenuName();
                newRow[1] = itemDetails.getMenucategory();
                newRow[2] = itemDetails.getMenuprice();

                itemListModel.addRow(newRow);
                foodOrderList.add(itemDetails);
                
                clearFields();

            } else {
                JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for adding to list");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for adding to list");
        }
    }//GEN-LAST:event_addItemBtnActionPerformed

    private void removeItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemBtnActionPerformed
        // TODO add your handling code here:

        try {
            int index = itemListTable.getSelectedRow();

            if (index < 0) {
                JOptionPane.showMessageDialog(this, "Please select a Food or Beverage item to be removed from list");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
            String itemName = String.valueOf(model.getValueAt(index, 0));
            MenuSelection itemDetails = system.getMenuSelectionList().getItemByName(itemName);

            model.removeRow(index);
            foodOrderList.remove(itemDetails);

            JOptionPane.showMessageDialog(this, "Food or Beverage item removed successfully from list");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a Food or Beverage item to be removed from list");
        }
    }//GEN-LAST:event_removeItemBtnActionPerformed

    private void bookOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookOrderBtnActionPerformed
        // TODO add your handling code here:

        DiningMenuServiceRequest bookFoodBev = new DiningMenuServiceRequest();

        try {
            DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
            if (model.getRowCount() != 0) {

                bookFoodBev.setMenuSelectionList(foodOrderList);
                bookFoodBev.setCustomerId(user.getCustomerId());
                bookFoodBev.setStatus("Pending");

                system.getDiningRoomServiceRequestList().getDiningRoomServiceRequestList().add(bookFoodBev);

                JOptionPane.showMessageDialog(this, "Food and Beverage order request sent to Manager");

                foodOrderList = new ArrayList<MenuSelection>();
                populateRequestTable();

                model.setRowCount(0);
                clearFields();
                formatRows();
                
            } else {
                JOptionPane.showMessageDialog(this, "Choose valid Food and Beverage items for booking");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose valid Food and Beverage items for booking");
        }
    }//GEN-LAST:event_bookOrderBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemBtn;
    private javax.swing.JButton bookOrderBtn;
    private javax.swing.JComboBox<String> chooseFoodDropdown;
    private javax.swing.JTextField itemCategoryTxt;
    private javax.swing.JTable itemListTable;
    private javax.swing.JTextField itemNameTxt;
    private javax.swing.JTextField itemPriceTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderStatusTable;
    private javax.swing.JButton removeItemBtn;
    private javax.swing.JButton viewDetailsBtn;
    // End of variables declaration//GEN-END:variables

    private void populateRequestTable() {

        try {
            DefaultTableModel model = (DefaultTableModel) orderStatusTable.getModel();
            model.setRowCount(0);

            for (DiningMenuServiceRequest fbWorkRequest : system.getDiningRoomServiceRequestList().getDiningRoomServiceRequestList()) {

                String itemsList = "";
                float orderPrice = 0;
                if (fbWorkRequest.getCustomerId().equals(user.getCustomerId())) {

                    for (MenuSelection item : fbWorkRequest.getMenuSelectionList()) {
                        itemsList += item.getMenuName()+ ", ";
                        orderPrice += item.getMenuprice();
                    }

                    Object[] newRow = new Object[3];
                    newRow[0] = itemsList;
                    newRow[1] = orderPrice;
                    newRow[2] = fbWorkRequest.getStatus();

                    model.addRow(newRow);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void clearFields() {
        
        itemNameTxt.setText("");
        itemPriceTxt.setText("");
        itemCategoryTxt.setText("");
        
    }
    
    private void formatRows() {

        DefaultTableModel model = (DefaultTableModel) orderStatusTable.getModel();

        orderStatusTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                String status = String.valueOf(model.getValueAt(row, 2));
                c.setBackground(status.equals("Pending") ? Color.WHITE : status.equals("Approved") ? Color.GREEN : Color.RED);
                return c;
            }
        });

    }
}
