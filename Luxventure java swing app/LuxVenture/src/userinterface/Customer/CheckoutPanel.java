/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.Customer;

import Enterprise.main.EcoSystem;
import Enterprise.Payments.CustomerPayments;
import Enterprise.Customer.Customer;
import Enterprise.EmailAddress.EmailAlert;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Chunk;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.LineSeparator;

import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author vardhankaranam25
 */
public class CheckoutPanel extends javax.swing.JPanel {

    /**
     * Creates new form CheckoutPanel
     */
    EcoSystem system;
    Customer user;
    float totalAmount;

    public CheckoutPanel(EcoSystem system, Customer user) {
        initComponents();
        this.system = system;
        this.user = user;

        totalAmountTxt.setEditable(false);
        totalAmount = 0;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        checkoutTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        totalAmountTxt = new javax.swing.JTextField();
        checkoutBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(242, 233, 174));
        setLayout(null);

        checkoutTable.setBackground(new java.awt.Color(242, 233, 174));
        checkoutTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.No", "Facility Used", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(checkoutTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(110, 180, 923, 402);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(140, 82, 255));
        jLabel1.setText("Checkout Page");
        add(jLabel1);
        jLabel1.setBounds(400, 120, 270, 43);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(140, 82, 255));
        jLabel2.setText("Total Amount:");
        add(jLabel2);
        jLabel2.setBounds(150, 590, 100, 30);
        add(totalAmountTxt);
        totalAmountTxt.setBounds(250, 590, 200, 30);

        checkoutBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        checkoutBtn.setForeground(new java.awt.Color(140, 82, 255));
        checkoutBtn.setText("Checkout");
        checkoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutBtnActionPerformed(evt);
            }
        });
        add(checkoutBtn);
        checkoutBtn.setBounds(470, 660, 120, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void checkoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutBtnActionPerformed
        // TODO add your handling code here:

        if(totalAmount != 0) {
        try {
            generatePDFInvoice();
            new EmailAlert().sendEmailInvoice(user);
            JOptionPane.showMessageDialog(this, "Invoice sent to your mail successfully!!");
        } catch (BadElementException ex) {
            Logger.getLogger(CheckoutPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CheckoutPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
        else {
            JOptionPane.showMessageDialog(this, "Your cart is empty");
        }
    }//GEN-LAST:event_checkoutBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkoutBtn;
    private javax.swing.JTable checkoutTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField totalAmountTxt;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {

        DefaultTableModel model = (DefaultTableModel) checkoutTable.getModel();
        model.setRowCount(0);
        int index = 1;

        for (CustomerPayments transaction : system.getCustomerPaymentsList().getCustomerPaymentsList()) {

            if (transaction.getCustomerId().equals(user.getCustomerId())) {
                totalAmount += transaction.getCheckoutprice();

                Object[] row = new Object[3];

                row[0] = index;
                row[1] = transaction.getFacilityUsed();
                row[2] = transaction.getCheckoutprice();

                model.addRow(row);
                index++;
            }
        }

        totalAmountTxt.setText(String.valueOf(totalAmount));
    }
    
    private void generatePDFInvoice() throws BadElementException, IOException {
    Document document = new Document(PageSize.A4);
    try {
        PdfWriter.getInstance(document, new FileOutputStream("Invoice.pdf"));
        document.open();

        // Fonts
        Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
        Font smallBold = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
        Font normal = new Font(Font.FontFamily.HELVETICA, 12);

        // Add company logo
        Image logo = Image.getInstance("/Users/harshikagolkonda/downloads/Vacation vista.jpeg"); // Replace with actual logo path
        logo.scaleToFit(140, 80);
        logo.setAbsolutePosition(40, 760); // Position logo
        document.add(logo);

        // Add Invoice title
        Paragraph invoiceTitle = new Paragraph("Invoice", titleFont);
        invoiceTitle.setAlignment(Element.ALIGN_CENTER);
        invoiceTitle.setSpacingBefore(logo.getScaledHeight() + 10); // Add space after the logo
        document.add(invoiceTitle);

        // Add a separator
        document.add(new Chunk(new LineSeparator()));

        // Customer and Company Details Tables
        PdfPTable detailsTable = new PdfPTable(2);
        detailsTable.setWidthPercentage(100);
        detailsTable.setSpacingBefore(10);

        // Company details on the right
        PdfPCell companyCell = new PdfPCell();
        companyCell.setBorder(Rectangle.NO_BORDER);
        companyCell.addElement(new Paragraph("VACATION VISTA", smallBold));
        companyCell.addElement(new Paragraph("360 Huntington Ave", normal));
        companyCell.addElement(new Paragraph("Boston, MA 02115", normal));
        companyCell.addElement(new Paragraph("United States", normal));
        detailsTable.addCell(companyCell);

        // Customer details on the left
        PdfPCell customerCell = new PdfPCell();
        customerCell.setBorder(Rectangle.NO_BORDER);
        customerCell.addElement(new Paragraph("BILL TO:", smallBold));
        customerCell.addElement(new Paragraph(user.getFirstName() + " " + user.getLastName(), normal));
        customerCell.addElement(new Paragraph("Age: " + user.getAge(), normal));
        customerCell.addElement(new Paragraph(user.getAddress(), normal));
        customerCell.addElement(new Paragraph(user.getEmailId(), normal));
        customerCell.addElement(new Paragraph(user.getPhoneNumber().toString(), normal));
        detailsTable.addCell(customerCell);

        document.add(detailsTable);

        // Add a separator
        document.add(new Chunk(new LineSeparator()));

        // Transactions Table
        PdfPTable transactionTable = new PdfPTable(4);
        transactionTable.setWidthPercentage(100);
        transactionTable.setSpacingBefore(10);
        String[] headers = new String[]{"Description", "Quantity", "Price", "Amount"};
        for (String header : headers) {
            PdfPCell headerCell = new PdfPCell(new Phrase(header, smallBold));
            headerCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            transactionTable.addCell(headerCell);
        }

        List<CustomerPayments> transactions = system.getCustomerPaymentsList().getCustomerPaymentsList();
        for (CustomerPayments trans : transactions) {
            if (trans.getCustomerId().equals(user.getCustomerId())) {
                transactionTable.addCell(new Phrase(trans.getFacilityUsed(), normal));
                transactionTable.addCell(new Phrase("1", normal));  // Assuming quantity is 1 for simplicity
                transactionTable.addCell(new Phrase(String.format("$%.2f", trans.getCheckoutprice()), normal));
                transactionTable.addCell(new Phrase(String.format("$%.2f", trans.getCheckoutprice()), normal));
            }
        }

        document.add(transactionTable);

        // Total Amount
        PdfPTable totalTable = new PdfPTable(4);
        totalTable.setWidthPercentage(100);
        totalTable.setSpacingBefore(10);
        totalTable.addCell(new Phrase(""));
        totalTable.addCell(new Phrase(""));
        totalTable.addCell(new Phrase("Total", smallBold));
        totalTable.addCell(new Phrase(String.format("$%.2f", totalAmount), smallBold));

        document.add(totalTable);

        // Add Notes
        Paragraph notes = new Paragraph("NOTES:\nPlease make the payment by the due date.", normal);
        notes.setSpacingBefore(20);
        document.add(notes);

        // Add Footer
        Paragraph footer = new Paragraph("This invoice was generated with the help of Vacation Vista.", normal);
        footer.setAlignment(Element.ALIGN_CENTER);
        footer.setSpacingBefore(20);
        document.add(footer);

        document.close();
    } catch (DocumentException | FileNotFoundException e) {
        e.printStackTrace();
    }
}
    
private PdfPCell getCell(String text, int alignment, Font font) {
    PdfPCell cell = new PdfPCell(new Phrase(text, font));
    cell.setPadding(5);
    cell.setHorizontalAlignment(alignment);
    cell.setBorder(Rectangle.NO_BORDER);
    return cell;
}

}
