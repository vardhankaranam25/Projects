/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.BookaRide;

import Enterprise.main.EcoSystem;
import Enterprise.DiningMenu.MenuSelection;
import Enterprise.Commute.BookaRide.Vehicle;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vardhankaranam25
 */
public class ManageVehiclePanel extends javax.swing.JPanel {

    private EcoSystem system;

    String mainValidationString = "";
    String validationString1 = "";
    String validationString2 = "";

    /**
     * Creates new form ManageVehicle
     * @param system
     */
    public ManageVehiclePanel(EcoSystem system) {
        initComponents();
        this.system = system;

        populateTable();
    }

    private void resetVehicleData() {
        cmbCategory.setSelectedItem("Choose Category");
        txtVehicleName.setText("");
        txtVehicleNum.setText("");
        cmbSeater.setSelectedItem("Choose Seater");
        txtPrice.setText("");
    }

    public boolean areDataFieldsEmpty() {
        validationString1 = "";
        if (txtVehicleNum.getText().isEmpty()) {
            validationString1 += "Vehicle Number, ";
        }
        if (txtVehicleName.getText().isEmpty()) {
            validationString1 += "Vehicle Name, ";
        }
        if (txtPrice.getText() == null) {
            validationString1 += "Price per hour, ";
        }

        if (cmbCategory.getSelectedIndex() == 0) {
            validationString1 += "Category, ";
        }

        if (cmbSeater.getSelectedIndex() == 0) {
            validationString1 += "Seater, ";
        }

        return isNotValid(validationString1);
    }

    public boolean areDataTypesCorrect() {
        validationString2 = "";
        if (!validateFloatDataType(txtPrice.getText())) {
            validationString2 += "Price, ";
        }
        return isNotValid(validationString2);
    }

    public boolean isNotValid(String str) {
        if (str.equals("")) {
            return false;
        } else {
            return true;
        }
    }

    public boolean validateFloatDataType(String str) {
        try {
            Float.parseFloat(str);
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

    public void validationErrorMessagesDialog(boolean validation1, boolean validation2) {
        if (validation1) {
            mainValidationString = validationString1;
            JOptionPane.showMessageDialog(this, "Please update the data for these fields: " + mainValidationString);
        } else if (validation2) {
            mainValidationString = validationString2;
            JOptionPane.showMessageDialog(this, "Please enter only numbers for these fields: " + mainValidationString);
        }
    }

    private boolean vehicleDetailsExistence() {
        String vehicleNumber = txtVehicleNum.getText();
        boolean exist = false;
        for (Vehicle vehicle : system.getVehicleList().getVehicleList()) {
            if (vehicleNumber.equals(vehicle.getVehicleNumber())) {
                exist = true;
                break;
            }
        }
        return exist;
    }

    private void populateTable() {
//new test

        DefaultTableModel model = (DefaultTableModel) tblVehicle.getModel();

        model.setRowCount(0);
        System.out.println(system.getVehicleList().getVehicleList());
        for (Vehicle vehicle : system.getVehicleList().getVehicleList()) {
            Object[] row = new Object[5];

            row[0] = vehicle;
            row[1] = vehicle.getVehicleName();
            row[2] = vehicle.getVehiclecategory();
            row[3] = vehicle.getVehicleseater();
            row[4] = vehicle.getVehicleprice();
            model.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtVehicleName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtVehicleNum = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        btnAddVehicle = new javax.swing.JButton();
        btnDeleteVehicle = new javax.swing.JButton();
        btnViewVehicle = new javax.swing.JButton();
        btnUpdateVehicle = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVehicle = new javax.swing.JTable();
        cmbCategory = new javax.swing.JComboBox<>();
        cmbSeater = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 222, 242));
        setForeground(new java.awt.Color(157, 193, 131));

        jLabel1.setBackground(new java.awt.Color(255, 222, 242));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(157, 193, 131));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MANAGE VEHICLES");

        jLabel2.setBackground(new java.awt.Color(255, 222, 242));
        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(157, 193, 131));
        jLabel2.setText("Vehicle Name");

        jLabel3.setBackground(new java.awt.Color(255, 222, 242));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(157, 193, 131));
        jLabel3.setText("Vehicle Number");

        jLabel4.setBackground(new java.awt.Color(255, 222, 242));
        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(157, 193, 131));
        jLabel4.setText("Seater");

        jLabel5.setBackground(new java.awt.Color(255, 222, 242));
        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(157, 193, 131));
        jLabel5.setText("Category");

        jLabel6.setBackground(new java.awt.Color(255, 222, 242));
        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(157, 193, 131));
        jLabel6.setText("Price per hour ($)");

        btnAddVehicle.setForeground(new java.awt.Color(157, 193, 131));
        btnAddVehicle.setText("ADD");
        btnAddVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVehicleActionPerformed(evt);
            }
        });

        btnDeleteVehicle.setForeground(new java.awt.Color(157, 193, 131));
        btnDeleteVehicle.setText("DELETE");
        btnDeleteVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteVehicleActionPerformed(evt);
            }
        });

        btnViewVehicle.setForeground(new java.awt.Color(157, 193, 131));
        btnViewVehicle.setText("VIEW");
        btnViewVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewVehicleActionPerformed(evt);
            }
        });

        btnUpdateVehicle.setForeground(new java.awt.Color(157, 193, 131));
        btnUpdateVehicle.setText("UPDATE");
        btnUpdateVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateVehicleActionPerformed(evt);
            }
        });

        tblVehicle.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        tblVehicle.setForeground(new java.awt.Color(157, 193, 131));
        tblVehicle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Vehicle Number", "Vehicle Name", "Category", "Seater", "Price per hour"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblVehicle);

        cmbCategory.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cmbCategory.setForeground(new java.awt.Color(157, 193, 131));
        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Category", "SUV", "Hatchback", "Sedan" }));

        cmbSeater.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Seater", "3", "4", "5", "6", "7" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(btnAddVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnDeleteVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnViewVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtVehicleName, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(205, 205, 205)
                                        .addComponent(btnUpdateVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(142, 142, 142)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtVehicleNum)
                                            .addComponent(cmbSeater, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 942, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(170, 170, 170))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtVehicleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtVehicleNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addComponent(cmbSeater, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddVehicle)
                    .addComponent(btnDeleteVehicle)
                    .addComponent(btnViewVehicle)
                    .addComponent(btnUpdateVehicle))
                .addGap(33, 33, 33))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVehicleActionPerformed
        // TODO add your handling code here:
        try {
            boolean validation1 = areDataFieldsEmpty();
            boolean validation2 = areDataTypesCorrect();

            if (!validation1 && !validation2) {
                String vehicleNumber = txtVehicleNum.getText();
                String vehicleName = txtVehicleName.getText();
                String category = (String) cmbCategory.getSelectedItem();
                Integer seater = Integer.parseInt((String) cmbSeater.getSelectedItem());
                Float price = Float.parseFloat(txtPrice.getText());

                if (!vehicleDetailsExistence()) {
                    Vehicle vehicle = system.getVehicleList().addVehicleDetails();
                    vehicle.setVehicleName(vehicleName);
                    vehicle.setVehicleNumber(vehicleNumber);
                    vehicle.setVehicleprice(price);
                    vehicle.setVehicleseater(seater);
                    vehicle.setVehiclecategory(category);

                    JOptionPane.showMessageDialog(this, "Vehicle number " + vehicleNumber + " added");
                    resetVehicleData();
                    populateTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Vehicle details already exists with the Vehicle Number"
                            + " : " + vehicleNumber);
                }
            } else {
                validationErrorMessagesDialog(validation1, validation2);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }//GEN-LAST:event_btnAddVehicleActionPerformed

    private void btnDeleteVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteVehicleActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRowIndex = tblVehicle.getSelectedRow();

            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select a row for deletion");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tblVehicle.getModel();
            Vehicle selectedVehicle = (Vehicle) model.getValueAt(selectedRowIndex, 0);

            system.getVehicleList().deleteVehicle(selectedVehicle);

            JOptionPane.showMessageDialog(this, "Vehicle Deleted");

            populateTable();
            resetVehicleData();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }


    }//GEN-LAST:event_btnDeleteVehicleActionPerformed

    private void btnViewVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewVehicleActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRowIndex = tblVehicle.getSelectedRow();

            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select a row for viewing");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tblVehicle.getModel();
            Vehicle selectedVehicle = (Vehicle) model.getValueAt(selectedRowIndex, 0);

            txtVehicleNum.setText(selectedVehicle.getVehicleNumber());
            txtVehicleName.setText(selectedVehicle.getVehicleName());
            cmbCategory.setSelectedItem(selectedVehicle.getVehiclecategory());
            cmbSeater.setSelectedItem(String.valueOf(selectedVehicle.getVehicleseater()));
            txtPrice.setText(String.valueOf(selectedVehicle.getVehicleprice()));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }


    }//GEN-LAST:event_btnViewVehicleActionPerformed

    private void btnUpdateVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateVehicleActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel model = (DefaultTableModel) tblVehicle.getModel();

            if (tblVehicle.getSelectedRowCount() == 1) {

                String vehicleNumber = txtVehicleNum.getText();
                String vehicleName = txtVehicleName.getText();
                int seater = Integer.parseInt((String) cmbSeater.getSelectedItem());
                float price = Float.parseFloat(txtPrice.getText());
                String category = (String) cmbCategory.getSelectedItem();

                int selectedRowIndex = tblVehicle.getSelectedRow();
                Vehicle vehicle = system.getVehicleList().getVehicles(selectedRowIndex);

                vehicle.setVehicleNumber(vehicleNumber);
                vehicle.setVehicleName(vehicleName);
                vehicle.setVehiclecategory(category);
                vehicle.setVehicleseater(seater);
                vehicle.setVehicleprice(price);

                populateTable();
                resetVehicleData();

                JOptionPane.showMessageDialog(this, "Update successful!");
            } else if (tblVehicle.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Table is empty");
            } else {
                JOptionPane.showMessageDialog(this, "Please select single row");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }


    }//GEN-LAST:event_btnUpdateVehicleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddVehicle;
    private javax.swing.JButton btnDeleteVehicle;
    private javax.swing.JButton btnUpdateVehicle;
    private javax.swing.JButton btnViewVehicle;
    private javax.swing.JComboBox<String> cmbCategory;
    private javax.swing.JComboBox<String> cmbSeater;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblVehicle;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtVehicleName;
    private javax.swing.JTextField txtVehicleNum;
    // End of variables declaration//GEN-END:variables
}
